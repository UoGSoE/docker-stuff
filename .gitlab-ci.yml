#
# Variables which should be set in the gitlab project or group :
#
# PHP_VERSION (eg '8.1')
# STACK_NAME (eg, 'amazingapp' - as in 'docker stack deploy $STACK_NAME')
# TRAEFIK_BACKEND (eg 'amazingapp-web' - label for traefik dashboard)
# TRAEFIK_QA_HOSTNAME (eg, amazing.qa-domain.ac.uk - hostname your app will be available on)
# TRAEFIK_PROD_HOSTNAME (eg, amazing.prod-domain.ac.uk - hostname your app will be available on)
# QA_DOTENV (*QA* .env file contents)
# QA_SERVER (eg, qaserver.domain.ac.uk)
# QA_SSH_KEY (private key for the deployment ssh user on QA)
# QA_SSH_USER (username for deployment ssh user on QA)
# PROD_DOTENV (*production* .env file contents)
# PROD_SERVER (see above)
# PROD_SSH_KEY (see above)
# PROD_SSH_USER (see above)
#
# There should also be two environments in your gitlab project - 'prod' and 'qa'
#

stages:
  - build-qa
  - test
  - build-prod
  - deploy

variables:
  QA_IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_PATH:qa-$CI_COMMIT_SHA
  PROD_IMAGE_NAME: $CI_REGISTRY/$CI_PROJECT_PATH:prod-$CI_COMMIT_SHA
  LOCAL_QA_IMAGE_NAME: localhost:5000/$CI_PROJECT_PATH:qa-$CI_COMMIT_SHA
  LOCAL_PROD_IMAGE_NAME: localhost:5000/$CI_PROJECT_PATH:prod-$CI_COMMIT_SHA

cache:
  paths:
  # - vendor/
  # - node_modules/

unit-tests:
  stage: test
  image: $QA_IMAGE_NAME
  services:
  - mysql:5.7
  variables:
    MYSQL_DATABASE: homestead
    MYSQL_ROOT_PASSWORD: secret
    MYSQL_USER: homestead
    MYSQL_PASSWORD: secret
  script:
  - cd /var/www/html
  - mkdir -p /run/secrets
  - cp -f .env.gitlab /run/secrets/.env
  - export APP_ENV=testing
  - php artisan key:generate
  - php artisan config:clear
  - php artisan migrate:fresh
  - cat .env
  - echo "Add code coverage and upload artifact to gitlab"
  - if `php artisan list | grep -q 'Run the application tests'`; then php artisan test --parallel -c phpunit.gitlab.xml ; else php vendor/bin/phpunit -c phpunit.gitlab.xml --colors=never --testdox ; fi

php-codestyle-check:
  stage: test
  image: $QA_IMAGE_NAME
  script:
    - if [[ -f /usr/local/bin/phpcs ]]; then php /usr/local/bin/phpcs --config-set ignore_warnings_on_exit 1 ; php /usr/local/bin/phpcs --standard=PSR12 app ; fi

stray-die-and-dump-check:
  stage: test
  image: $QA_IMAGE_NAME
  script:
    - egrep -r '[^a-zA-Z](dd\(|dump\()' app || exit 0

php-security-scan:
  stage: test
  image: $QA_IMAGE_NAME
  script:
    - if [[ -f /root/.composer/vendor/bin/security-checker ]]; then php /root/.composer/vendor/bin/security-checker security:check ./composer.lock ; fi

dotenv-example-missing-keys-check:
  stage: test
  image: $QA_IMAGE_NAME
  artifacts:
    paths:
      - envdiff.txt
    expire_in: 1 week
  script:
    - set +eo pipefail
    - echo 'diff --new-line-format='\'''\'' --unchanged-line-format='\'''\'' <(sort $1 | egrep -v '\''^#'\'' | sed -e '\''s/=.*//'\'') <(sort $2 | egrep -v '\''^#'\'' | sed -e '\''s/=.*//'\'')' > envdiff.sh
    - chmod +x envdiff.sh
    - echo "Checking prod dotenv for keys missing in .env.example" | tee -a envdiff.txt
    - echo "$PROD_DOTENV" > .env
    - ./envdiff.sh .env .env.example | tee -a envdiff.txt
    - echo "Checking .env.example for keys missing in prod dotenv" | tee -a envdiff.txt
    - echo "$PROD_DOTENV" > .env
    - ./envdiff.sh .env.example .env | tee -a envdiff.txt
    - echo "Checking qa dotenv for keys missing in .env.example" | tee -a envdiff.txt
    - echo "$QA_DOTENV" > .env
    - ./envdiff.sh .env .env.example | tee -a envdiff.txt
    - echo "Checking .env.example for keys missing in qa dotenv" | tee -a envdiff.txt
    - echo "$QA_DOTENV" > .env
    - ./envdiff.sh .env.example .env | tee -a envdiff.txt

build-qa:
  stage: build-qa
  extends:
    - .build
  environment: qa
  variables:
    DOCKER_TARGET: ci
    IMAGE_NAME: $QA_IMAGE_NAME

build-prod:
  stage: build-prod
  extends:
    - .build
  environment: prod
  only:
  - master
  variables:
    DOCKER_TARGET: prod
    IMAGE_NAME: $PROD_IMAGE_NAME

deploy_to_qa:
  stage: deploy
  extends:
    - .deployment
  when: manual
  environment: 
    name: qa
    url: http://${TRAEFIK_QA_HOSTNAME}
  needs:
  - build-qa
  variables:
    IMAGE_NAME: ${LOCAL_QA_IMAGE_NAME}
    TRAEFIK_BACKEND: ${TRAEFIK_QA_BACKEND}
    TRAEFIK_HOSTNAME: ${TRAEFIK_QA_HOSTNAME}
    SSH_KEY: ${QA_SSH_KEY}
    SSH_USER: ${QA_SSH_USER}
    SERVER: ${QA_SERVER}
    DOTENV: ${QA_DOTENV}

deploy_to_prod:
  stage: deploy
  extends:
    - .deployment
  when: manual
  only:
  - master
  needs:
  - build-prod
  environment: 
    name: prod
    url: https://${TRAEFIK_PROD_HOSTNAME}
  variables:
    IMAGE_NAME: ${LOCAL_PROD_IMAGE_NAME}
    TRAEFIK_BACKEND: ${TRAEFIK_PROD_BACKEND}
    TRAEFIK_HOSTNAME: ${TRAEFIK_PROD_HOSTNAME}
    SSH_KEY: ${PROD_SSH_KEY}
    SSH_USER: ${PROD_SSH_USER}
    SERVER: ${PROD_SERVER}
    DOTENV: ${PROD_DOTENV}

.build:
  image: docker:stable
  variables:
    DOCKER_TARGET: ""
    IMAGE_NAME: ""
  script:
  - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
  - DOCKER_BUILDKIT=1 docker build --build-arg PHP_VERSION=${PHP_VERSION} --target="${DOCKER_TARGET}" -t $IMAGE_NAME .
  - docker push $IMAGE_NAME

.deployment:
  when: manual
  image: docker:stable
  variables:
    IMAGE_NAME: ""
    TRAEFIK_BACKEND: ""
    TRAEFIK_HOSTNAME: ""
    SSH_KEY: ""
    SSH_USER: ""
    SERVER: ""
    DOTENV: ""
  script:
  - apk add -qU openssh curl
  - eval $(ssh-agent -s)
  - echo "$SSH_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan ${SERVER} > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts
  - export NOW=`date +%Y-%m-%d-%H-%M-%S`
  - export DOTENV_NAME="${CI_PROJECT_PATH_SLUG}-${CI_ENVIRONMENT_NAME}-dotenv-${NOW}"
  - export DOCKER_HOST=ssh://${SSH_USER}@${SERVER}
  - echo "${DOTENV}" | docker secret create ${DOTENV_NAME} -
  - echo "Deploying stack ${STACK_NAME} image ${IMAGE_NAME} with secret ${DOTENV_NAME}"
  - docker stack deploy -c ${CI_ENVIRONMENT_NAME}-stack.yml --prune ${STACK_NAME}
  - ./docker/docker-stack-wait.sh ${STACK_NAME}
  - if [ ! -z "${SLACK_WEBHOOK}" ]; then curl -X POST -H 'Content-type:application/json' --data "{\"username\":\"gitlab\", \"text\":\"${GITLAB_USER_NAME} Deployed ${CI_ENVIRONMENT_NAME} ${STACK_NAME}\", \"channel\":\"#deployments\", \"icon_emoji\":\":ghost:\"}" ${SLACK_WEBHOOK}; fi
